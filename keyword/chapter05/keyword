- Thread란 무엇일까요?
    - Thread란 무엇일까요?

        하나의 프로그램에서 여러개의 실행 단위/흐름이 존재함을 의미 (프로세스는 실행중인 프로그램)

        여러 처리를 비동기적으로 처리하기 위해 사용 → 동시처리!, 어떤 작업이 수행중임에도 다른 작업이 동시에 수행됨,

        Activity의 코드 처리를 위해 thread 발생.

        오래 걸리는 작업은 별도의 thread를 발생시켜 처리해서 main thread는 유휴 상태를 유지해 언제든지 화면 갱신하도록 해주는 것이 중요

        ![image.png](attachment:e6491453-0e36-4d3d-861d-46188ea27683:image.png)


    ```kotlin
    class MainActivity : AppCompatActivity() {
    	override fun onCreate(savedInstanceState : Bundle?){
    	super.onCreate(savedInstanceState)
    	    ...
       	thread(start = true) {	//'kotlin.concurrent.thread' 를 import 해야 한다.
       	...
       	}
        }
    }
    ```

    - Thread를 사용하는 예시는 무엇이 있을까요?
        - **웹 브라우저** (크롬, 파이어폭스) → 페이지 렌더링, 다운로드, 사용자 입력을 동시에 처리
        - **게임 개발** → 그래픽 렌더링, AI 계산, 네트워크 통신을 동시에 수행
        - **채팅 애플리케이션** → 메시지 송수신과 UI 업데이트를 동시에 처리
        - **서버 애플리케이션** → 여러 사용자의 요청을 동시에 처리
- Main Thread와 Worker Thread
    - View Control을 담당하는 Thread는 무엇일까요?

        ui스레드 또는 메인스레드

    - Worker Thread는 어떤 작업을 담당할까요?

        메인 스레드와 별도로 실행되는 보조 스레드

        메인 스레드가 멈추지 않도록 도와준다

- 동기와 비동기
    - 동기란 무엇일까요?
        - 요청을 보낸 후 응답을 기다린다.
        - 기다리는 동안 다른 작업을 하지 않고, 응답이 오면 다시 작업을 시작한다
    - 비동기란 무엇일까요?
        - 작업이 완료될 때까지 기다리지 않고 다음 작업을 계속 진행하는 것
    - 동기와 비동기 각각의 장단점은 무엇이 있을까요?


        |  | 장점 | 단점 |
        | --- | --- | --- |
        | 동기(Synchronous) | 관리가 쉽고 단순, 다음작업이 결과에 의존할 때 유용 | 작업 완료까지 대기해야 해서 다른 작업을 못하고 멈추는 것 |
        | 비동기(Asynchronous) | ux를 향상하는 데 중요, 오래걸리는 작업 처리시 사용 | 구조가 복잡해질 수 있음 |
- Handler
    - Android에서 Handler란 무엇일까요?

        핸들러는 메세지 큐를 통해 순차적으로 메인 스레드에서 처리한 메세지를 전달하는 역할

        ![image.png](attachment:659b62d0-cf2f-4419-81c2-ae17fc638b9e:image.png)

    - Handler를 사용하는 이유는 무엇일까요?

        각각의 스레드 안에서 만들어 질 수 있고 다른 스레드에서 요청하는 정보를 메세지 큐를 통해 순서대로 실행시켜 줄 수 있기 때문에 리소스에 대한 동시 접근의 문제를 해결해준다

    - Handler의 Message란 무엇일까요?

        obtainMessage() : 호출의 결과로 메세지 객체를 리턴 받게함.(스레드에서 핸들러로 메세지를 보내려면 Message 객체를 사용한다.)

        sendMessage() : Message Queue 에 넣는다.

        handleMessage() : 메서드에 정의된 기능이 수행됨.(sendMessage() 로 메세지를 받고 자동으로 handleMessage가 호출되서 전달된 Message 객체를 처리할 수 있다.)이 때 handleMessage 메소드는 메인 스레드에서 실행된다.

- Looper
    - Android에서 Looper란 무엇일까요?

        Looper(루퍼)는 메세지 큐에 저장된 message나 runnable은 Looper가 차례로 꺼내(선입선출:FIFO) 핸들러로 전달한다. 핸들러가 메세지 큐에 넣은 것을 다시 꺼내 핸들러로 전달하는 이유는 message나 runnable을 처리하기 위함이다.

        안드로이드는 편리성 제공을 위해 핸들러를 기본 생성자를 통해 루퍼 없이 사용할 수 있게 해준다. 기본 생성자를 통해 핸들러를 생성하면 생성되는 핸들러는 해당 핸들러를 호출한 스레드의 메세지 큐와 Looper에 자동 연결된다.

        ![image.png](attachment:e4589edd-c8bc-4c46-82f7-53e6488d15cf:image.png)

    - Looper를 활용하는 예시는 무엇이 있을까요?
        - 안드로이드에서는 `Main Thread (UI Thread)`에 기본적으로 `Looper`가 포함되어 있음
        - **`HandlerThread`는 `Looper`를 자동으로 생성**하여 백그라운드에서 지속적인 작업을 수행
        - `HandlerThread` 없이 직접 `Looper`를 사용하는 백그라운드 스레드 만들 수 있음
        - 특정 작업을 일정 간격으로 실행해야 할 때 `Looper`를 활용한 주기적인 작업 실행

        https://velog.io/@sh1mj1/Android-Thread

- Coroutine
    - Coroutine이란 무엇일까요?

        비동기 코드를 간결하고 효율적으로 작성하기 위한 동시성 설계 패턴

        일시 중단되고 재개 가능한 경량 스래드

    - Coroutine은 언제 사용할까요?

        비동기 작업을 간소화하고, 백그라운드에서 복잡한 작업을 처리하여 앱의 응답성을 유지해야 할 때

    - Coroutine의 Dispatcher란 무엇일까요?
        - 코루틴을 시작하거나 재개할 스레드를 결정하기 위한 도구
        - 모든 Dispatcher는 CoroutineDispatcher 인터페이스를 구현해야 함
    - Dispatcher의 종류에는 무엇이 있을까요?
        - **`Dispatchers.Main`**: UI 업데이트, 사용자 입력 처리 등 메인 스레드에서 실행되어야 하는 작업에 사용됩니다.
        - **`Dispatchers.IO`**: 네트워크 요청, 파일 입출력 등 I/O 작업에 최적화되어 있으며, 백그라운드 스레드에서 실행됩니다. 스레드 풀을 사용하여 여러 I/O 작업을 효율적으로 관리합니다.
        - **`Dispatchers.Default`**: CPU를 많이 사용하는 작업에 적합하며, 백그라운드 스레드에서 실행됩니다.
        - **`Dispatchers.Unconfined`**: 코루틴이 시작된 현재 스레드에서 실행되는 것이 특징입니다. 하지만 코루틴이 일시 중단된 후 재개될 때 어떤 스레드에서든 재개될 수 있습니다.

        https://developer.android.com/kotlin/coroutines?hl=ko